package _2_ecc.examples;

import org.bouncycastle.asn1.x9.ECNamedCurveTable;
import org.bouncycastle.crypto.generators.ECKeyPairGenerator;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECKeyGenerationParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;

import java.security.SecureRandom;

/**
 * Copyright Adam Smolarek chaindev.pl
 */
public class _1ECC {
    public static void main(String[] args) {
        //SECNamedCurves.secp256k1;
        var curve = ECNamedCurveTable.getByName("secp256k1");
        //H = all EC points / points used for operations, usually it is set to 1
        //G generator point for this EC
        //N the number of all points that can be generated by multiplying G
        var domainParams = new ECDomainParameters(curve.getCurve(), curve.getG(), curve.getN(), curve.getH());
        ECKeyPairGenerator gen = new ECKeyPairGenerator();
        gen.init(new ECKeyGenerationParameters(domainParams, new SecureRandom()));

        var mul = curve.getCurve().getMultiplier();

        var alice = gen.generateKeyPair();

        var alicePub = (ECPublicKeyParameters) alice.getPublic();
        var alicePrv = (ECPrivateKeyParameters) alice.getPrivate();

        System.out.println(alicePrv.getD());
        System.out.println(alicePub.getQ().getXCoord() + "," + alicePub.getQ().getYCoord());

        var calculatedPub = mul.multiply(curve.getG(), alicePrv.getD()).normalize();
        System.out.println(calculatedPub);
        System.out.println(calculatedPub.getXCoord() + "," + calculatedPub.getYCoord());
    }
}
